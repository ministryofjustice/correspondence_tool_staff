- content_for :heading, flush: true
  = t('cases.offender_sar_complaint.complaint_types_heading')

= render partial: 'layouts/header'

= GovukElementsErrorsHelper.error_summary @case.object,
        "#{pluralize(@case.errors.count, t('common.error'))} #{ t('common.summary_error')}", ""
        
= form_for @case.object, url: url, as: :offender_sar_complaint do |f|

  = f.radio_button_fieldset(:complaint_type) do |fieldset|
    - fieldset.radio_input('standard_complaint')
    - fieldset.radio_input('ico_complaint')
      = f.text_field :ico_contact_name
      = f.text_field :ico_contact_email
      = f.text_field :ico_contact_phone
      = f.text_field :ico_reference
    - fieldset.radio_input('litigation_complaint')
      = f.text_field :gld_contact_name
      = f.text_field :gld_contact_email
      = f.text_field :gld_contact_phone
      = f.text_field :gld_reference

  = f.radio_button_fieldset :complaint_subtype,
      choices: Case::SAR::OffenderComplaint::complaint_subtypes.keys do |fieldset|
    - fieldset.radio_input('sscl_partial_case')
    - fieldset.radio_input('covid_partial_response')
    - fieldset.radio_input('missing_data')
    - fieldset.radio_input('inaccurate_data')
    - fieldset.radio_input('timeliness')
    - fieldset.radio_input('not_applicable')

  = f.radio_button_fieldset :priority,
    choices: Case::SAR::OffenderComplaint::priorities.values

  input name="current_step" type="hidden" value=@case.current_step
  input name="flag_for_creation_from_sar_page" type="hidden" value= @creation_optional_flags[:flag_for_creation_from_sar_page]

  = f.submit 'Continue', class: 'button'
