version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@4.0.0 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@8.2.1 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate

references:
  defaults: &defaults
    working_directory: ~/track-a-query
    resource_class: small

# Sets up the docker images and environment variables that we use
  test_container_config: &test_container_config
    docker:
      - image: cimg/ruby:3.1.4-browsers
        environment:
          GITHUB_TEAM_NAME_SLUG: correspondence
          APPLICATION_DEPLOY_NAME: Track-a-query
          RAILS_ENV: test
          RACK_ENV: test
          PGHOST: 127.0.0.1
          PG_PASSWORD: ""
          PGUSER: postgres
          POSTGRES_DB: correspondence_platform_test

      - image: cimg/postgres:12.15
        environment:
          PG_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
          PG_USER: postgres
          POSTGRES_DB: correspondence_platform_test

  deploy_container_config: &deploy_container_config
    docker:
      - image: ministryofjustice/cloud-platform-tools:1.29

  install_psql: &install_psql
    run:
      name: Install psql client
      command: |
         sudo apt update && sudo apt install postgresql-client

  update_chromedriver: &update_chromedriver
    run:
      name: Update chrome and the chromedriver
      command: |
        sudo curl https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        RAILS_ENV=test bin/rails webdrivers:chromedriver:version
        RAILS_ENV=test bin/rails webdrivers:chromedriver:update

  setup_test_reporter: &setup_test_reporter
    run:
      name: Setup Code Climate test-reporter
      command: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter
        ./cc-test-reporter before-build

  install_expect: &install_expect
    run:
      name: Install Expect
      command: |
        apk add \
          --no-cache \
          --no-progress \
          expect

  install_bundler: &install_bundler
    run:
      name: Install bundler
      command: |
        gem install bundler -v 2.4.13

  check_bundler_version: &check_bundler_version
    run:
      name: Check the installed version of bundler
      command: |
        bundle -v

  restore_cache: &restore_cache
    restore_cache:
      keys:
        - correspondence-tool-staff-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - correspondence-tool-staff-

  install_dependencies: &install_dependencies
    run:
      name: Install dependencies
      command: |
        if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
          bundle config set --local path 'vendor/bundle'
          bundle check || bundle install && bundle clean
        fi

  save_cache: &save_cache
    save_cache:
      key: correspondence-tool-staff-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

  wait_for_db: &wait_for_db
    run:
      name: Wait for DB
      command: dockerize -wait tcp://localhost:5432 -timeout 1m

  set_up_the_database: &set_up_the_database
    run:
      name: Set up the database
      command: |
        bundle exec rake db:setup

  rubocop: &rubocop
    run:
      name: Run rubocop
      command: bundle exec rubocop

  run_unit_and_feature_tests: &run_unit_and_feature_tests
    run:
      name: Run unit and feature tests
      command: |
        export PARALLEL_TEST_PROCESSORS=8
        export COVERAGE=1
        bundle exec rails parallel:create
        bundle exec rails parallel:load_structure
        bundle exec rails parallel:spec

  upload_test_coverage: &upload_test_coverage
    run:
      name: Upload the test coverage into codeclimate
      command: |
        ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
        ./cc-test-reporter sum-coverage --output - coverage/codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -

  configure_build_tag: &configure_build_tag
    run:
      name: Build docker image
      command: |
        mkdir -p workspace
        current_branch=$(git branch | grep \* | cut -d ' ' -f2)
        short_version=$(git rev-parse --short $current_branch)
        build_tag=cts-${current_branch}-${short_version}
        echo build_tag > workspace/build_tag
        python3 config/pipeline/aws_ecr_scan_results.py --search track-a-query-ecr --tag $build_tag --slack_webhook ${SLACK_WEBHOOK_CT} || true

  deploy_to_dev: &deploy_to_dev
    run:
      name: Deploy to Development environment
      command: |
        build_tag=`cat /tmp/workspace/build_tag`
        ./deploy.sh $build_tag development circleci
        echo "export BUILD_TAG=${build_tag}" >> $BASH_ENV
        source $BASH_ENV

  deploy_to_staging: &deploy_to_staging
    run:
      name: Deploy to Staging environment
      command: |
        build_tag=`cat /tmp/workspace/build_tag`
        ./deploy.sh $build_tag staging circleci
        echo "export BUILD_TAG=${build_tag}" >> $BASH_ENV
        source $BASH_ENV

  deploy_to_qa: &deploy_to_qa
    run:
      name: Deploy to QA environment
      command: |
        build_tag=`cat /tmp/workspace/build_tag`
        ./deploy.sh $build_tag qa circleci
        echo "export BUILD_TAG=${build_tag}" >> $BASH_ENV
        source $BASH_ENV

  deploy_to_demo: &deploy_to_demo
    run:
      name: Deploy to Demo environment
      command: |
        build_tag=`cat /tmp/workspace/build_tag`
        ./deploy.sh $build_tag demo circleci
        echo "export BUILD_TAG=${build_tag}" >> $BASH_ENV
        source $BASH_ENV

  deploy_to_production: &deploy_to_production
    run:
      name: Deploy to production environment
      command: |
        build_tag=`cat /tmp/workspace/build_tag`
        ./deploy.sh $build_tag production circleci
        echo "export BUILD_TAG=${build_tag}" >> $BASH_ENV
        source $BASH_ENV

jobs:

  build_and_test:
    <<: *test_container_config
    resource_class: xlarge
    working_directory: ~/track-a-query
    steps:
      - checkout
      - *restore_cache
      - *install_bundler
      - *check_bundler_version
      - *install_psql
      - *install_dependencies
      - *save_cache
      - *wait_for_db
      - *set_up_the_database
      - *rubocop
      - *update_chromedriver
      - *setup_test_reporter
      - *run_unit_and_feature_tests
      - *upload_test_coverage

  build_branch_and_push_to_ecr:
    <<: *deploy_container_config
    <<: *defaults
    executor: aws-ecr/default
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - *configure_build_tag
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com *build_and_push_docker_image
      - aws-ecr/build-image:
          push-image: true
          tag: ${BUILD_TAG}
          region: $ECR_REGION
          repo: $ECR_REPOSITORY
      - persist_to_workspace:
          root: workspace
          paths:
            - build_tag

  build_main_and_push_to_ecr:
    <<: *deploy_container_config
    <<: *defaults
    executor: aws-ecr/default
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - *configure_build_tag
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com *build_and_push_docker_image
      - aws-ecr/build-image:
          push-image: true
          tag: ${BUILD_TAG}
          region: $ECR_REGION
          repo: $ECR_REPOSITORY
      - persist_to_workspace:
          root: workspace
          paths:
            - build_tag

  dev_deployment_tasks: &do_dev_deployment_tasks
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - *install_expect
      - *deploy_to_dev
      - slack/notify:
          color: '#1d990c'
          message: '${CIRCLE_USERNAME} deployed *${BUILD_TAG}* to *Development*'
          webhook: ${SLACK_WEBHOOK_CT}

  deploy_branch_to_dev: *do_dev_deployment_tasks
  deploy_main_to_dev: *do_dev_deployment_tasks

  staging_deployment_tasks: &do_staging_deployment_tasks
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - *install_expect
      - *deploy_to_staging
      - slack/notify:
          color: '#1d990c'
          message: '${CIRCLE_USERNAME} deployed *${BUILD_TAG}* to *Staging*'
          webhook: ${SLACK_WEBHOOK_CT}

  deploy_branch_to_staging: *do_staging_deployment_tasks
  deploy_main_to_staging: *do_staging_deployment_tasks

  qa_deployment_tasks: &do_qa_deployment_tasks
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - *install_expect
      - *deploy_to_qa
      - slack/notify:
          color: '#1d990c'
          message: '${CIRCLE_USERNAME} deployed *${BUILD_TAG}* to *QA*'
          webhook: ${SLACK_WEBHOOK_CT}

  deploy_branch_to_qa: *do_qa_deployment_tasks
  deploy_main_to_qa: *do_qa_deployment_tasks

  demo_deployment_tasks: &do_demo_deployment_tasks
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - *install_expect
      - *deploy_to_demo
      - slack/notify:
          color: '#1d990c'
          message: '${CIRCLE_USERNAME} deployed *${BUILD_TAG}* to *Demo*'
          webhook: ${SLACK_WEBHOOK_CT}

  deploy_branch_to_demo: *do_demo_deployment_tasks
  deploy_main_to_demo: *do_demo_deployment_tasks

  deploy_main_to_production:
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - *install_expect
      - *deploy_to_production
      - slack/notify:
          color: '#1d990c'
          mentions: 'staff-tools-team'
          message: '${CIRCLE_USERNAME} deployed *${BUILD_TAG}* to *Production*'
          webhook: ${SLACK_WEBHOOK_SS_CIRCLECI}
      - slack/notify:
          color: '#1d990c'
          message: '${CIRCLE_USERNAME} deployed *${BUILD_TAG}* to *Production*'
          webhook: ${SLACK_WEBHOOK_CT}

workflows:
  version: 2

  build_and_deploy_main:
    jobs:
      - build_and_test:
          filters:
            branches:
              only: main
      - build_main_and_push_to_ecr:
          context: build_main_and_push_to_ecr-workflow
            - build_and_test
      - deploy_main_to_dev:
          requires:
            - build_main_and_push_to_ecr
      - deploy_main_to_staging_approval:
          type: approval
          requires:
            - deploy_main_to_dev
      - deploy_main_to_staging:
          requires:
            - deploy_main_to_staging_approval
      - deploy_main_to_production_approval:
          type: approval
          requires:
            - deploy_main_to_staging
      - deploy_main_to_production:
          requires:
            - deploy_main_to_production_approval
      - deploy_main_to_qa_approval:
          type: approval
          requires:
            - build_main_and_push_to_ecr
      - deploy_main_to_qa:
          requires:
            - deploy_main_to_qa_approval
      - deploy_main_to_demo_approval:
          type: approval
          requires:
            - build_main_and_push_to_ecr
      - deploy_main_to_demo:
          requires:
            - deploy_main_to_demo_approval

  build_and_deploy_branch:
    jobs:
      - build_and_test:
          filters:
            branches:
              ignore: main
      - build_branch_and_push_to_ecr_approval:
          type: approval
          requires:
            - build_and_test
      context: build_branch_and_push_to_ecr-workflow
      - build_branch_and_push_to_ecr:
          requires:
            - build_branch_and_push_to_ecr_approval
      - deploy_branch_to_dev_approval:
          type: approval
          requires:
            - build_branch_and_push_to_ecr
      - deploy_branch_to_dev:
          requires:
            - deploy_branch_to_dev_approval
      - deploy_branch_to_staging_approval:
          type: approval
          requires:
            - build_branch_and_push_to_ecr
      - deploy_branch_to_staging:
          requires:
            - deploy_branch_to_staging_approval
      - deploy_branch_to_qa_approval:
          type: approval
          requires:
            - build_branch_and_push_to_ecr
      - deploy_branch_to_qa:
          requires:
            - deploy_branch_to_qa_approval
      - deploy_branch_to_demo_approval:
          type: approval
          requires:
            - build_branch_and_push_to_ecr
      - deploy_branch_to_demo:
          requires:
            - deploy_branch_to_demo_approval

