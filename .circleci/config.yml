version: 2

references:
  defaults: &defaults
    working_directory: ~/track-a-query

# Sets up the docker images and environment variables that we use
  test_container_config: &test_container_config
    docker:
      - image: circleci/ruby:2.5.5-node-browsers-legacy
        environment:
          GITHUB_TEAM_NAME_SLUG: pq-team
          APPLICATION_DEPLOY_NAME: pq
          RAILS_ENV: test
          RACK_ENV: test
          PGHOST: 127.0.0.1
          PG_PASSWORD: ""
          PGUSER: postgres
          POSTGRES_DB: correspondence_platform_test

      - image: circleci/postgres:9.5-alpine
        environment:
          PG_PASSWORD: ""
          PG_USER: postgres
          POSTGRES_DB: correspondence_platform_test

  deploy_container_config: &deploy_container_config
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci


# These are defining the steps which are used below in the jobs
  
  install_psql: &install_psql
    run:
      name: Install psql client
      command: |
         sudo apt update && sudo apt install postgresql-client
  
  update_chromedriver: &update_chromedriver
    run:
      name: Update chrome and the chromedriver
      command: |
        sudo curl https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        RAILS_ENV=test bin/rails webdrivers:chromedriver:update

  install_expect: &install_expect
    run:
      name: Install Expect
      command: |
        apk add \
          --no-cache \
          --no-progress \
          expect

  install_gpg: &install_gpg
    run:
      name: Install GPG
      command: |
        apk add \
          --no-cache \
          --no-progress \
          gnupg

  create_gpg_key_file: &create_gpg_key_file
    run:
      name: Create GPG Key file from Environment variable
      command: |
        echo -e ${GPG_PRIVATE_KEY} > PRIVATE_GPG_KEY.asc

  configure_gpg: &configure_gpg
    run:
      name: Configure GPG
      command: |
        gpg --import --batch --allow-secret-key-import PRIVATE_GPG_KEY.asc

  delete_gpg_key_file: &delete_gpg_key_file
    run:
        name: Delete GPG Key file after import
        command: Â¬
          rm PRIVATE_GPG_KEY.asc

  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        gpgconf --kill gpg-agent
        gpg-agent --daemon --allow-preset-passphrase
        /usr/libexec/gpg-preset-passphrase --preset --passphrase $GPG_PASSPHRASE $GPG_KEY_KEYGRIP_ID
        expect -c "spawn gpg --edit-key $GPG_KEY_ID trust quit; send \"5\ry\r\"; expect eof"
        git-crypt unlock

  build_docker_image: &build_docker_image
    run:
      name: Build docker image
      command: |
        export BUILD_DATE=$(date -Is) >> $BASH_ENV
        source $BASH_ENV
        docker build \
          --build-arg APPVERSION=${CIRCLE_BUILD_NUM} \
          --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
          --build-arg APP_BUILD_DATE=${BUILD_DATE} \
          --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
          -t app .

  push_docker_image: &push_docker_image
    run:
      name: Push docker image
      command: |
        login="$(aws ecr get-login --region eu-west-2 --no-include-email)"
        ${login}
        docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${ECR_FOLDER}:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${ECR_FOLDER}:${CIRCLE_SHA1}"
        if [ "${CIRCLE_BRANCH}" == "master" ]; then
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${ECR_FOLDER}:latest"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${ECR_FOLDER}:latest"
        fi

  install_bundler: &install_bundler
    run:
      name: Install bundler
      command: |
        gem install bundler -v 2.0.2

  check_bundler_version: &check_bundler_version
    run:
      name: Check the installed version of bundler
      command: |
        bundle -v

  set_up_aws_cli: &set_up_aws_cli
    run:
      # this is needed to get a token from the cloud platform to use kubernetes
      name: Set up AWS CLI
      command: |
        sudo apt-get update
        sudo apt-get --assume-yes install python3-pip
        sudo pip3 install awscli

  restore_cache: &restore_cache
    restore_cache:
      keys:
        - correspondence-tool-staff-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - correspondence-tool-staff-

  install_dependencies: &install_dependencies
    run:
      name: Install dependencies
      command: |
        if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
          bundle check --path vendor/bundle || bundle install --path vendor/bundle && bundle clean
        fi

  save_cache: &save_cache
    save_cache:
      key: correspondence-tool-staff-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

  wait_for_db: &wait_for_db
    run:
      name: Wait for DB
      command: dockerize -wait tcp://localhost:5432 -timeout 1m

  set_up_the_database: &set_up_the_database
    run:
      name: Set up the database
      command: |
        bundle exec rake db:setup

  rubocop: &rubocop
    run:
      name: Run rubocop
      command: bundle exec rubocop

  run_unit_tests: &run_unit_tests
    run:
      name: Run unit tests
      command: |
        bundle exec rspec
# This command is from the CircleCI docs and is for running in a time
# base system. We currenly are not using it, but here if we want to
# implement it
#
# bundle exec rspec --profile 10 \
#                   --format RspecJunitFormatter \
#                   --out test_results/rspec.xml \
#                   --format progress \
#                   $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
  run_feature_tests: &run_feature_tests
    run:
      name: Run feature tests
      command: |
        bundle exec rspec spec/features

  deploy_to_dev: &deploy_to_dev
    run:
      name: Deploy to Development environment
      command: |
        setup-kube-auth
        kubectl config use-context development
        sed -i -e s/:latest/:$CIRCLE_SHA1/ config/kubernetes/development/deployment.yaml
        kubectl apply --record=false -f ./config/kubernetes/development/

  deploy_to_staging: &deploy_to_staging
    run:
      name: Deploy to Staging environment
      command: |
        setup-kube-auth
        kubectl config use-context staging
        sed -i -e s/:latest/:$CIRCLE_SHA1/ config/kubernetes/staging/deployment.yaml
        kubectl apply --record=false -f ./config/kubernetes/staging/

  deploy_to_qa: &deploy_to_qa
    run:
      name: Deploy to QA environment
      command: |
        setup-kube-auth
        kubectl config use-context staging
        sed -i -e s/:latest/:$CIRCLE_SHA1/ config/kubernetes/qa/deployment.yaml
        kubectl apply --record=false -f ./config/kubernetes/qa/

  deploy_to_demo: &deploy_to_demo
    run:
      name: Deploy to Demo environment
      command: |
        setup-kube-auth
        kubectl config use-context staging
        sed -i -e s/:latest/:$CIRCLE_SHA1/ config/kubernetes/demo/deployment.yaml
        kubectl apply --record=false -f ./config/kubernetes/demo/        

  # deploy_to_production: &deploy_to_production
  #   run:
  #     name: Deploy to production environment
  #     command: |
  #       setup-kube-auth
  #       kubectl config use-context production
  #       sed -i -e s/:latest/:$CIRCLE_SHA1/ k8s-deploy/production/deployment.yaml
  #       kubectl apply --record=false -f ./k8s-deploy/production/

#  These are the jobs which run the steps. The jobs are used by the workflows.

jobs:
  build_and_test:
    <<: *test_container_config
    <<: *defaults   
    steps:
          - checkout
          - setup_remote_docker:
              docker_layer_caching: true

  build_and_test_real:
    <<: *test_container_config
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *install_bundler
      - *check_bundler_version
      - *install_psql
      - *set_up_aws_cli
      - *install_dependencies
      - *save_cache
      - *wait_for_db
      - *set_up_the_database
      - *rubocop
      - *update_chromedriver
      - *run_unit_tests
      - *run_feature_tests

  build_and_push_to_ecr:
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker:
          docker_layer_caching: true          
      #- *build_docker_image
      #- *push_docker_image

# Both should be identical but different names
  deploy_to_dev:
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - *install_gpg
      - *install_expect
      - *create_gpg_key_file
      - *configure_gpg
      - *decrypt_secrets
      #- *deploy_to_dev

  deploy_master_to_dev:
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - *install_gpg
      - *install_expect
      - *create_gpg_key_file
      - *configure_gpg
      - *decrypt_secrets
      - *deploy_to_dev

  deploy_to_staging:
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - *install_gpg
      - *install_expect
      - *create_gpg_key_file
      - *configure_gpg
      - *decrypt_secrets
      - *deploy_to_staging

  deploy_master_to_staging:
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - *install_gpg
      - *install_expect
      - *create_gpg_key_file
      - *configure_gpg
      - *decrypt_secrets
      - *deploy_to_staging

  deploy_to_qa:
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - *install_gpg
      - *install_expect
      - *create_gpg_key_file
      - *configure_gpg
      - *decrypt_secrets
      - *deploy_to_qa

  deploy_to_demo:
    <<: *deploy_container_config
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - *install_gpg
      - *install_expect
      - *create_gpg_key_file
      - *configure_gpg
      - *decrypt_secrets
      - *deploy_to_demo      

#  Workflows combine jobs to perform the actions

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build_and_test
      - build_and_push_to_ecr:
          requires:
            - build_and_test
      - deploy_dev_approval:
          type: approval
          requires:
            - build_and_push_to_ecr
          filters:
            branches:
              ignore: master  
      - deploy_to_dev:
          requires:
            - deploy_dev_approval
      - deploy_master_to_dev:
          requires:
            - build_and_push_to_ecr
          filters:
            branches:
              only: master        
      - deploy_staging_approval:
          type: approval
          requires:
            - build_and_push_to_ecr
          filters:
            branches:
              ignore: master
      - deploy_to_staging:
          requires:
            - deploy_staging_approval
      - deploy_master_staging_approval:
          type: approval
          requires:
            - deploy_master_to_dev
          filters:
            branches:
              only: master            
      - deploy_master_to_staging:
          requires:
            - deploy_master_staging_approval         
      - deploy_qa_approval:
          type: approval
          requires:
            - build_and_push_to_ecr
      - deploy_to_qa:
          requires:
            - deploy_qa_approval
      - deploy_demo_approval:
          type: approval
          requires:
            - build_and_push_to_ecr             
      - deploy_to_demo:
          requires:
            - deploy_demo_approval                                      
      - deploy_production_approval:
          type: approval
          requires:
            - deploy_master_to_staging
          filters:
            branches:
              only: master
      - deploy_production:
           requires:
            - deploy_production_approval
